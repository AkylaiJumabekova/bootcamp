// "function expression"


// function nameOfFunc (params) { // function declaretion
//     ...code...
//     return
// }
// nameOfFunc()





// "В чем же разница между declaretion & expression?"



// let add = function(num1, num2, num3) {
//     return num1 + num2 + num3
// };
// console.log(add(10, 15, 25)); //50

// одна вызывается по имени и вызывается по имени, а вторая помещается в помещение. Эти функции не подвержены хоистингу , тк они в let, а let не подвержена хоистингу


// "Другой пример"

let argsVar = function(a, b) {
    console.log(a, b);
    console.log([...arguments]);
};

argsVar(10, 'hello', null, true);


// "Другой пример"

// (function() {
//     alert('FUNCTION CALLED');
// }) (); // если мы хотим чтобы функция была вызвана немедленно , нужно взять ее в круглые скобки (до function и после } мы поставили круглые скобки и в конце вызвали ее  этим - ()  ). Так не называя ее можно заставить ее работать




// (function nameFunc(){
//     alert('FUNCTION CALLED');
// })();
// (function) (); // что будет если назвать функцию? Ничего , она сработает



// "Другой пример"

// let helloFunc = function(use='Guest') {
//     console.log(`Hello: ${user}!`);
// };
// helloFunc('Tom');
// helloFunc();








// "Задача 1"

// создать функцию, которая принимает массив и ключевое слово из запроса, если это слово есть в массиве, то вывести алерт: Слово найдено, в противном случае вывести алерт: Данные не найденты (function expression)



// "Задача 2"

// создать функцию, которая будет принимать от пользователя числа пока сам пользователь не решит остановиться, затем необходимо вывести алерт, в котором будет сообщение типа: в переданных вами числах 5 чисел больше 0, 3 числа меньше 0, 2 числа 0 (declaration)



// "Задача 2, вариант с массивом"



// "Задача 3"


//

// "Задача 4"

// "Задача 5"

// "Задача 6"


